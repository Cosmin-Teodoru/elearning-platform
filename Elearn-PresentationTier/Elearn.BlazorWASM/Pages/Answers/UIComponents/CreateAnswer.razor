@using Elearn.Shared.Models
@using Elearn.Shared.Dtos
@using Elearn.HttpClients.Service
@using System.Security.Claims
@inject IAnswerService AnswerService
@inject IUserService UserService
@inject IStringLocalizer<App> Localizer
@inject NavigationManager NavMgr 
<link href="CreateAnswer.razor.css" rel="stylesheet"/>

<AuthorizeView>
    <Authorized>
    <div class="section">
        <div class="card">

            <div class="form-group field flex-container">
                <div class="comment-section">@Localizer["Answers section below"]</div>
                <MudAvatar Size="Size.Small" Image="@CurrentUser?.Image"/>
                <input class="comment-input" type="text" placeholder=@Localizer["Post an answer"] @bind="bodyText" @bind:event="oninput"/>
                <div class="button-row">
                    <button @onclick="Create" disabled="@(string.IsNullOrEmpty(bodyText))" class="acceptbtn">
                        <img src="img/comment.png" class="comment_img" alt="comment_icon">
                    </button>
                </div>
            </div>
        </div>
    </div>
    </Authorized>
</AuthorizeView>

@code
{
    private string bodyText = "";
    private string? username;
    
    [Parameter]
    public QuestionDto? CurrentQuestion { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    public UserDto? CurrentUser;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        username = user.Identity!.Name;
        
        CurrentUser = await UserService.GetUserByUsernameAsync(username);
    }
   
    
    
    private async Task Create()
    {
        
        try
        {
            await AnswerService.Create(new AnswerCreationDto(bodyText, CurrentQuestion.Id,CurrentUser.Id,false));
            bodyText = "";
          
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            
        }
    }

}