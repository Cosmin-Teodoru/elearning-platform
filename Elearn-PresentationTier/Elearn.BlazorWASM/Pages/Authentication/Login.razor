@page "/Login"
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@using System.Security.Claims
@using Elearn.Shared.Dtos
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IUserService UserService
@inject IStringLocalizer<App> Localizer

<style>
    body {
    background-image: url("img/1426870.png");
    }
</style>


<MudForm Model="@_userLoginDto" @ref="form" @bind-IsValid="@success" Class="pb-12">
    <MudGrid Class="d-flex justify-center align-center mx-auto pa-4 mt-8" Style="width: 700px;" Elevation="0">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <h3>
                    <MudInputLabel Class="d-flex align-center justify-center ">@Localizer["Login"]</MudInputLabel>
                </h3>
                <MudTextField T="string" Validation="@(new Func<string, IEnumerable<string>>(UsernameError))" Typo="Typo.subtitle2" Label="@Localizer["Username"]" Required="true" @bind-Value="_userLoginDto.Username" InputType="InputType.Text"
                              For="@(() => _userLoginDto.Username)" RequiredError="Username field is required!">
                </MudTextField>
                <MudTextField T="string" Class="pb-2" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Label=@Localizer["Password"] Required="true" @bind-Value="_userLoginDto.Password" InputType="InputType.Password"
                              For="@(() => _userLoginDto.Password)" RequiredError="Password filed is required!">
                </MudTextField>

                <div Class="d-flex justify-center align-center mx-auto ">
                    <MudIcon Icon="@Icons.Material.Filled.MenuBook" Style="font-size: 4rem;"/>
                </div>

                <div Class="d-flex justify-center align-center pb-2">@Error</div>


                <MudCardActions Class="d-flex justify-center">
                    <MudButton Class="mx-2" OnClick="LoginAsync" Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Success">@Localizer["Login"]</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.Reset())" Class="mx-2">@Localizer["Reset"]</MudButton>
                </MudCardActions>
            </MudPaper>
        </MudItem>

    </MudGrid>


</MudForm>


@code {
    private UserLoginDto _userLoginDto = new();
    public bool success;
    public MudForm form;
    public string Error = "";
    public List<UserDto> users = new();
    public bool UsernameFound;
    public bool AccountFound;

    private async Task LoginAsync()
    {
        try
        {
                  UsernameFound = false;
                  AccountFound = false;
            
            foreach (var user in users)
            {
                if (user.Username.Equals(_userLoginDto.Username))
                {
                    UsernameFound = true;
                }

                if (user.Username.Equals(_userLoginDto.Username) && user.Password.Equals(_userLoginDto.Password))
                {
                    AccountFound = true;
                }
            }

            if(UsernameFound is false)
            {
                Error = Localizer["Account does not exist"];
                return;
            }
            
            
            if (AccountFound is false && UsernameFound)
            {
                Error = Localizer["Wrong Password"];
                return;
            }
            
            
            
      


            await authService.LoginAsync(_userLoginDto.Username, _userLoginDto.Password);
            navMgr.NavigateTo("/",true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private IEnumerable<string> UsernameError(string username)
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            yield return Localizer["Username is required!"];
            yield break;
        }
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
            yield return Localizer["Password is required!"];
    }

}