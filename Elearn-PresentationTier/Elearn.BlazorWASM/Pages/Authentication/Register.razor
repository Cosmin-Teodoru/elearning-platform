@page "/Register"
@using Microsoft.AspNetCore.Components
@using Elearn.Shared.Dtos
@using Elearn.Shared.Enum
@using Elearn.HttpClients.Service
@using System.Text.RegularExpressions
@using System.Security.AccessControl
@using System.ComponentModel.DataAnnotations
@inject IAuthService authService
@inject IUniversityService universityService


<EditForm Model="@newUser" OnValidSubmit="CreateNewUserAsync">
    <DataAnnotationsValidator/>
    <MudGrid Class="d-flex justify-center align-center" Elevation="0">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                              <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

                    <MudTextField T="string"  Validation="@(new Func<string, string>(UsernameError))"  Typo="Typo.subtitle2" Label="Username" Required="true" @bind-Value="newUser.Username" InputType="InputType.Text"
                                  For="@(() => newUser.Username)" RequiredError="User name field is required!"> 
                    </MudTextField>
                    <MudTextField T="string" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Label="Password"   Required="true" @bind-Value="newUser.Password" InputType="InputType.Password"
                                  For="@(() => newUser.Password)" RequiredError="Password filed is required!">
                    </MudTextField>
                    <MudTextField T="string" Required="true" Label="Repeat the password" @bind-Value="@repeatPassword" InputType="InputType.Password" 
                                  For="@(() => @repeatPassword)" RequiredError="Repeat password field is required!" Validation="@(new Func<string, string>(PasswordMatch))">
                    </MudTextField>
                    <MudTextField T="string"  Label="Email" Required="true" @bind-Value="newUser.Email" InputType="InputType.Email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"     For="@(() => newUser.Email)" RequiredError="Email is required!">
                    </MudTextField>
                    <MudTextField T="string"  Validation="@(new Func<string, string>(NameError))" Label="Full Name" Required="true"  @bind-Value="newUser.Name" InputType="InputType.Text"
                                  For="@(() => newUser.Name)" RequiredError="Name of user is required!">
                    </MudTextField>


                 
                    <MudSelect  Required="true" Validation="@(new Func<string, string>(RoleError))" @bind-Value="newUser.Role" Label="Select role"   AdornmentColor="Color.Secondary">
                        @foreach (var item in Enum.GetValues(typeof(RoleEnum)))
                        {
                            <MudSelectItem Value="@item.ToString()">@item</MudSelectItem>
                        }
                    </MudSelect>
                    
                    <MudSelect Validation="@(new Func<string, string>(UniversityNull))" @bind-Value="@currentunivesity" Required="true" Dense="true" ToStringFunc="@convertUniversity" Label="Select your university"  AdornmentColor="Color.Secondary">
                        @foreach (UniversityDto item in _universityDtos)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    </MudSelect>
                </MudForm>
                  <MudCardActions Class="d-flex justify-center">
                      <MudButton Class="mx-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => form.Validate())">Create Account</MudButton>
                  </MudCardActions>
            </MudPaper>
        </MudItem>
        
    </MudGrid>


    <ValidationSummary/>
    </EditForm> 


@code {
    public UserCreationDto newUser = new();
    public string repeatPassword;
    bool success;
    MudForm form;

    private List<UniversityDto>? _universityDtos = new List<UniversityDto>();
    private UniversityDto? currentunivesity;
    private Func<UniversityDto, string> convertUniversity = ci => ci?.Name;

    public string[] errors = { };
    MudTextField<string> pwField1;
    public UserCreationDto Dto = new();

    public string errorUniversity = "Select one of the universities above";

    private async Task CreateNewUserAsync()
    {
        if (newUser.Role.Equals(RoleEnum.Student.ToString()))
            newUser.SecurityLevel = 2;
        if (newUser.Role.Equals(RoleEnum.Teacher.ToString()))
            newUser.SecurityLevel = 4;

        if (currentunivesity is not null)
            newUser.UniversityId = currentunivesity.Id;
        
        if (repeatPassword.Equals(newUser.Password))
            await authService.RegisterAsync(newUser);
      
    }


    protected override async Task OnInitializedAsync()
    {
        _universityDtos = await universityService.GetAllUniveritiesAsync();
    }
  
    private IEnumerable<string> PasswordStrength(string pw)
    {     
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (Dto.Password != arg)
            return "Passwords doesn't match";
        return null;
    }

    private string UniversityNull(string arg)
    {
        if (currentunivesity is null)
        {
            return "You should choose a university. University cannot be empty";
        }
        return null;
    }
    private string RoleError(string arg)
    {
        if (Dto.Role is null)
        {
            return "You should choose a role. Role is required";
        }
        return null;
    }
    private string NameError(string arg)
    {
        if (Dto.Name is null)
        {
            return "You should input your Full Name";
        }
        return null;
    }
    private string UsernameError(string arg)
    {
        if (Dto.Username is null)
        {
            return "You should input your correct Username";
        }
        return null;
    }
}