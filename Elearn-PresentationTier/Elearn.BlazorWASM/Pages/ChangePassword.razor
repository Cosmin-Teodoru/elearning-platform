@page "/ChangePassword"
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using Elearn.Shared.Dtos
@inject IUserService _UserService


<AuthorizeView>
    <NotAuthorized>
        <h3>Please log in to manage your account</h3>
    </NotAuthorized>
    <Authorized Context="Auth">

        <EditForm Model="@updateUser" OnValidSubmit="ChangeUserPassword">
            <DataAnnotationsValidator/>
            <MudGrid Class="d-flex justify-center align-center" Elevation="0">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <h3>
                            <MudInputLabel Class="d-flex align-center justify-center ">Change Password</MudInputLabel>
                        </h3>
                        <MudTextField T="string" Label="Old password" Required="true" @bind-Value="@oldPassword" InputType="InputType.Password"
                                      For="@(() => oldPassword)" RequiredError="Old password field is required!">
                        </MudTextField>
                        <MudTextField T="string" Label="New password" Required="true" @bind-Value="updateUser.Password" InputType="InputType.Password"
                                      For="@(() => updateUser.Password)" RequiredError="New Password field is required!">
                        </MudTextField>
                        <MudTextField T="string" Label="Repeat new password" Required="true" @bind-Value="@repeatPassword" InputType="InputType.Password"
                                      For="@(() => repeatPassword)" RequiredError="Repeat new password field is required!">
                        </MudTextField>


                        <MudCardActions Class="d-flex justify-center">
                            <MudButton Class="mx-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Change Password</MudButton>
                        </MudCardActions>
                    </MudPaper>
                </MudItem>

            </MudGrid>


            <ValidationSummary/>
        </EditForm>

    </Authorized>

</AuthorizeView>

@code {
    
    public UpdateUserDto updateUser = new();
    public string oldPassword;
    public string repeatPassword;
    private string? username;
    public User? CurrentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;

        userClaims = user.Claims;
        username = user.Identity!.Name!;
        CurrentUser = await _UserService.GetUserByUsernameAsync(username);
        Console.WriteLine(CurrentUser);
    }
    
    private async Task ChangeUserPassword()
    {
     
    if (repeatPassword.Equals(updateUser.Password) && oldPassword.Equals(CurrentUser?.Password))
        Console.WriteLine("im herererreerere");
        updateUser.Name = CurrentUser.Name;
        updateUser.Email = CurrentUser.Email; 
        Console.WriteLine(updateUser);
        await _UserService.UpdateUserAsync(updateUser);
        
    }

}