@page "/EditLecture/{Url}"
@inject ILectureService LectureService
@inject IAuthService authService
@inject NavigationManager NavMgr 
@inject IStringLocalizer<App> Localizer
@using Blazored.TextEditor
@using Elearn.HttpClients.Service
@using Elearn.Shared.Dtos
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims

<AuthorizeView>
    <NotAuthorized>
        <h3>@Localizer["Please log in to create a post"]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">
        <style>
            body {
            background-image: url("img/1426870.png");   
            }
        </style>
        @if (name is not null && name.Equals(_newLecture.Username))
        {
            <EditForm Model="@_newLecture" OnValidSubmit="UpdateLecture">
                <MudGrid Class="d-flex justify-center align-center mx-auto pa-4 mt-8 " Style="width: 1300px;" Elevation="0">
                    <MudItem xs="12" sm="7">
                        <MudPaper Class="pa-4">
                            <DataAnnotationsValidator/>
                            <h3 class=" pb-8">
                                <MudInputLabel Class="d-flex align-center justify-center ">@Localizer["Edit this lecture"]</MudInputLabel>
                            </h3>


                            <div class="form-group pb-4">
                                <label for="title">@Localizer["Title"]</label>
                                <InputText id="title" @bind-Value="_newLecture.Title" class="form-control"/>
                                <ValidationMessage For="@(() => _newLecture.Title)"/>
                            </div>
                            @* <div class="form-group pb-4"> *@
                            @*     <label for="url">Url</label> *@
                            @*     <InputText id="url" @bind-Value="_newLecture.Url" class="form-control"/> *@
                            @*     <ValidationMessage For="@(() => _newLecture.Url)"/> *@
                            @* </div> *@
                            <div class="form-group pb-4">
                                <label for="url">@Localizer["Description"]</label>
                                <InputText id="description" @bind-Value="_newLecture.Description" class="form-control"/>
                                <ValidationMessage For="@(() => _newLecture.Description)"/>
                            </div>
                            <div class="form-control-file pb-4">
                                <label for="image">@Localizer["Image"]</label>
                                <InputFile OnChange="OnFileChange"></InputFile>
                            </div>
                            <div class="form-group pb-4">
                                <label for="date">@Localizer["Date"]</label>
                                <InputDate id="date" @bind-Value="_newLecture.DateCreated" class="form-control"/>
                            </div>


                            <div class="card pb-8" style="height:350px;">
                                <div class="card-header">
                                    Html Text Editor
                                </div>

                                <div style="height:250px; color:black;">

                                    <!-- Text editor -->
                                    <BlazoredTextEditor @ref=QuillHtml Placeholder="write somthing...">
                                        <ToolbarContent>
                                            <select class="ql-header">
                                                <option selected=""></option>
                                                <option value="1"></option>
                                                <option value="2"></option>
                                                <option value="3"></option>
                                                <option value="4"></option>
                                                <option value="5"></option>
                                            </select>
                                            <span class="ql-formats">
                                                <button class="ql-bold"></button>
                                                <button class="ql-italic"></button>
                                                <button class="ql-underline"></button>
                                                <button class="ql-strike"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <select class="ql-color"></select>
                                                <select class="ql-background"></select>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-list" value="ordered"></button>
                                                <button class="ql-list" value="bullet"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-link"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-video"></button>
                                            </span>
                                        </ToolbarContent>
                                        <EditorContent>
                                            @((MarkupString)_newLecture.Body)
                                        </EditorContent>

                                    </BlazoredTextEditor>

                                </div>
                            </div>


                            <div class="d-flex justify-center align-center pb-2 pt-4">@Error</div>


                            <MudCardActions Class="d-flex justify-center pb-4">
                                <button type="submit" class="btn btn-primary">Create</button>
                            </MudCardActions>


                            <!-- Preview card -->
                            <div class="card text-dark pb-4">
                                <div class="card-header text-dark">
                                    the preview Of html editor
                                </div>
                                <div class="card-body">
                                    @preview
                                </div>
                            </div>

                            <div class="card-footer d-flex justify-center">
                                <button type="button" class="btn btn-success" @onclick=@(async () => await ShowPreviewOfBody())>Show OutPut</button>
                            </div>


                            <ValidationSummary/>
                        </MudPaper>
                    </MudItem>

                </MudGrid>
            </EditForm>
        }
        else
        {
            <h3>@Localizer["Only the creator of this lecture can edit it!"]</h3>
        }
    </Authorized>
</AuthorizeView>

@code {
    private BlazoredTextEditor QuillHtml;
    private MarkupString preview;

    [Parameter]
    public string? Url { get; set; }

    private LectureDto _newLecture = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    public string Error = "";

    async Task UpdateLecture()
    {
        _newLecture.Body = await QuillHtml.GetHTML();

        if (string.IsNullOrEmpty(_newLecture.Body))
        {
            Error = Localizer["No body found!"];
            return;
        }
        if (string.IsNullOrEmpty(_newLecture.Description))
        {
            Error = Localizer["Description is missing!"];
            return;
        }
        if (string.IsNullOrEmpty(_newLecture.Title))
        {
            Error = Localizer["Title is missing!"];
            return;
        }
        if (string.IsNullOrEmpty(_newLecture.Url))
        {
            Error = Localizer["Url is missing!"];
            return;
        }


        _newLecture.Username = name;
        try
        {
            LectureUpdateDto updateDto = new LectureUpdateDto(_newLecture.Title, _newLecture.Body, _newLecture.Url, _newLecture.Description, _newLecture.Image, _newLecture.Username, _newLecture.DateCreated);
            await LectureService.UpdateLecture(updateDto);
            NavMgr.NavigateTo($"/Lectures/{_newLecture.Url}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Error = e.Message;
        }
    }

    private async Task ShowPreviewOfBody()
    {
        if (!string.IsNullOrWhiteSpace(await QuillHtml.GetText()))
        {
            preview = (MarkupString)await QuillHtml.GetHTML();
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        _newLecture.Image = imageData;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        userClaims = user.Claims;
        name = user.Identity!.Name!;

        _newLecture = await LectureService.GetLectureByUrlAsync(Url);
    }

}