@page "/ManageAccount"
@using System.Security.Claims
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@inject IUserService _UserService
@inject NavigationManager NavMgr 

<AuthorizeView>
    <NotAuthorized>
        <h3>Please log in to manage your account</h3>
    </NotAuthorized>
    <Authorized Context="Auth">


        <div class="page-background-class align-center justify-center">
             <MudCard Class="mx-auto pa-6 mt-12" Style="width: 500px;">
                <h3 class=" d-flex justify-center">Hello, @CurrentUser.Name</h3>
                <DataAnnotationsValidator/>
                <div class="form-group d-flex justify-center">
                    <label>Current email : @CurrentUser.Email</label>
                </div>
                <ValidationSummary/>
                <MudCardActions Class="d-flex justify-center">
                    <MudButton Class="mx-2" OnClick="() => OpenChangePassword()" Variant="Variant.Filled" Color="Color.Success">Change Password</MudButton>
                </MudCardActions>
                <MudCardActions Class="d-flex justify-center">
                    <MudButton Class="mx-2" OnClick="() => OpenChangeEmail()" Variant="Variant.Filled" Color="Color.Success">Change Email</MudButton>
                </MudCardActions>

            </MudCard>
        </div>


    </Authorized>

</AuthorizeView>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private string? username;
    private bool isLoggedIn;
    public User? CurrentUser;

    private void OpenChangePassword()
    {
        NavMgr.NavigateTo($"/ChangePassword");
    }

    private void OpenChangeEmail()
    {
        NavMgr.NavigateTo($"/ChangeEmail");
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        username = user.Identity!.Name;
        Console.WriteLine(username);
        CurrentUser = await _UserService.GetUserByUsernameAsync(username);
        
    }



}