@page "/ChangePassword"
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using System.Text.RegularExpressions
@using Elearn.Shared.Dtos
@inject IUserService _UserService
@inject NavigationManager NavMgr 
@inject IStringLocalizer<App> Localizer


<AuthorizeView>
    <NotAuthorized>
        <h3>@Localizer["Please log in to change your password"]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">
   <style>
    body {
   background-image: url("img/1426870.png");
    }
</style>
        <MudForm Model="@Dto" @ref="form" @bind-IsValid="@success" Class="pb-12">
            <MudGrid Class="d-flex justify-center align-center  mx-auto pa-4 mt-8" Elevation="0"  Style="width: 900px;">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <h3>
                            <MudInputLabel Class="d-flex align-center justify-center ">@Localizer["Change Password"]</MudInputLabel>
                        </h3>
                        <MudTextField T="string" Label=@Localizer["Old password"] @bind-Value="@oldPassword" InputType="InputType.Password"
                                      For="@(() => oldPassword)" Validation="@(new Func<string, IEnumerable<string>>(WrongPassword))" Required="true" RequiredError="Old password field is required!">
                        </MudTextField>

                        <MudTextField T="string" Label=@Localizer["New password"] HelperText=@Localizer["Choose a strong password"] @bind-Value="Dto.Password" InputType="InputType.Password"
                                      For="@(() => Dto.Password)" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="New Password field is required!">
                        </MudTextField>

                        <MudTextField T="string" Label=@Localizer["Repeat new password"] @bind-Value="@repeatPassword" InputType="InputType.Password"
                                      For="@(() => repeatPassword)" Validation="@(new Func<string, string>(PasswordMatch))" Required="true" RequiredError="Repeat new password field is required!">
                        </MudTextField>


                        <MudCardActions Class="d-flex justify-center pt-4">
                            <MudButton Class="mx-2" OnClick="ChangeUserPassword" Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Success">@Localizer["Change Password"]</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">@Localizer["Validate"]</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.Reset())" Class="mx-2">@Localizer["Reset"]</MudButton>
                        </MudCardActions>
                    </MudPaper>
                </MudItem>

            </MudGrid>

        </MudForm>

    </Authorized>

</AuthorizeView>

@code {
    public bool success;
    public MudForm form;
    public UpdateUserDto Dto = new();
    public string oldPassword;
    public string repeatPassword;
    private string? username;
    public UserDto? CurrentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        userClaims = user.Claims;
        username = user.Identity!.Name!;

        CurrentUser = await _UserService.GetUserByUsernameAsync(username);
        Dto.Email = CurrentUser.Email;
        Dto.Name = CurrentUser.Name;
        Dto.Image = CurrentUser.Image;
        Dto.Approved = CurrentUser.Approved;
    }

    private async Task ChangeUserPassword()
    {
        if (repeatPassword.Equals(Dto.Password) && oldPassword.Equals(CurrentUser?.Password))
        {
            await _UserService.UpdateUserAsync(Dto);
            NavMgr.NavigateTo($"/ManageAccount");
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private IEnumerable<string> WrongPassword(string pw)
    {
        if (!CurrentUser.Password.Equals(pw))
        {
            yield return "Old password is wrong!";
        }
    }

    private string PasswordMatch(string arg)
    {
        if (Dto.Password != arg)
            return "Passwords don't match";
        return null;
    }

}