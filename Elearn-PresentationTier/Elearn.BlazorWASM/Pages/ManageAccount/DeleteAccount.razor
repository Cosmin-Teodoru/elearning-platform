@page "/DeleteAccount"
@using Elearn.Shared.Dtos
@using Elearn.Shared.Models
@using System.Security.Claims
@using Elearn.HttpClients.Service
@inject IUserService UserService
@inject IAuthService AuthService
@inject NavigationManager NavMgr 
@inject IStringLocalizer<App> Localizer

<AuthorizeView>
    <NotAuthorized>
        <h3>@Localizer["Please log in to delete your account"]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">
   <style>
    body {
    background-image: url("img/1426870.png");
    }
</style>
        <MudForm @ref="form" @bind-IsValid="@success" Class="pb-12">

            <MudGrid Class="d-flex justify-center align-center  mx-auto pa-4 mt-8" Elevation="0"  Style="width: 900px;">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                    <h3>
                        <MudInputLabel Class="d-flex align-center justify-center ">@Localizer["Delete account"]</MudInputLabel>
                    </h3>
                    <MudTextField T="string" Label=@Localizer["Password"] @bind-Value="@userPassword" InputType="InputType.Password"
                                      For="@(() => userPassword)" Validation="@(new Func<string, IEnumerable<string>>(WrongPassword))" Required="true" RequiredError="Old password field is required!">
                        </MudTextField>
                        
                        <MudCardActions Class="d-flex justify-center pt-4">
                            <MudButton Class="mx-2" OnClick="DeleteUserAccount" Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Success">@Localizer["Delete Account"]</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.Reset())" Class="mx-2">@Localizer["Reset"]</MudButton>
                        </MudCardActions>
                    </MudPaper>
                </MudItem>

            </MudGrid>


        </MudForm>

    </Authorized>

</AuthorizeView>


@code {

    public bool success;
    public MudForm form;
    public string userPassword;
    private string? username;
    public UserDto? CurrentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        userClaims = user.Claims;
        username = user.Identity!.Name!;

        CurrentUser = await UserService.GetUserByUsernameAsync(username);
    }

    
    private IEnumerable<string> WrongPassword(string pw)
    {
        if (!CurrentUser.Password.Equals(pw))
        {
            yield return "password is wrong!";
        }
    }
    
    private async Task DeleteUserAccount()
    {
        if (userPassword.Equals(CurrentUser?.Password))
        {
            await UserService.DeleteUserAsync(CurrentUser.Username);
            await AuthService.LogoutAsync();
            NavMgr.NavigateTo($"/Register");
        }
    }
}