@page "/ManageAccount"
@using System.Security.Claims
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@inject IUserService _UserService
@inject NavigationManager NavMgr 

<AuthorizeView>
    <NotAuthorized>
        <h3>Please log in to manage your account</h3>
    </NotAuthorized>
    <Authorized Context="Auth">


          <MudForm   Class="pb-8">
                   <MudGrid Class="d-flex justify-center align-center" Elevation="0">
                       <MudItem xs="12" sm="7">
             <MudCard Class="mx-auto pa-6 mt-12" Style="width: 500px;">
                <h3 class=" d-flex justify-center">Hello, @CurrentUser?.Name</h3>
               
                 <div class="form-group d-flex justify-center">
                     <label>Current email : @CurrentUser?.Email</label>
                 </div>
                 <MudCardActions Class="d-flex justify-center">
                    <MudButton Class="mx-2" OnClick="() => OpenChangePassword()" Variant="Variant.Filled" Color="Color.Success">Change Password</MudButton>
                </MudCardActions>
                 <MudCardActions Class="d-flex justify-center">
                     <MudButton Class="mx-2" OnClick="() => OpenChangeEmail()" Variant="Variant.Filled" Color="Color.Success">Change Email</MudButton>
                 </MudCardActions>
                 <MudCardActions Class="d-flex justify-center">
                                     <MudButton Class="mx-2" OnClick="() => OpenDeleteAccount()" Variant="Variant.Filled" Color="Color.Success">Delete Account</MudButton>
                                 </MudCardActions>

            </MudCard>
 
      </MudItem>

            </MudGrid>

        </MudForm>


    </Authorized>

</AuthorizeView>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private string? username;
    private bool isLoggedIn;
    public UserDto? CurrentUser;

    private void OpenChangePassword()
    {
        NavMgr.NavigateTo($"/ChangePassword");
    }

    private void OpenChangeEmail()
    {
        NavMgr.NavigateTo($"/ChangeEmail");
    }
    
    private void OpenDeleteAccount()
    {
        NavMgr.NavigateTo($"/DeleteAccount");
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        username = user.Identity!.Name;
        CurrentUser = await _UserService.GetUserByUsernameAsync(username);
        
    }



}