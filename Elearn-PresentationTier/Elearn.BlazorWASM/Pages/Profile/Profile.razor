@page "/Profile"
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using Elearn.Shared.Dtos
@using Elearn.HttpClients.Service
@using System.Security.Claims
@inject ILectureService _lectureService
@inject IQuestionService _questionService
@inject IUserService _userService
@inject NavigationManager NavMgr 


<AuthorizeView>
    <NotAuthorized>
        <div class="d-flex align-center justify-center">
            <h3>Please log in to view your user profile</h3>
        </div>
        <div>
            <MudCardActions Class="d-flex justify-center">
                               <MudButton Class="mx-2" OnClick="() => OpenLoginView()" Variant="Variant.Filled" Color="Color.Success"><img src="img/Login.png"/></MudButton>
                           </MudCardActions>
        </div>
        
    </NotAuthorized>
    <Authorized Context="Auth">


        <div class="page-background-class align-center justify-center">
             <MudCard Class="mx-auto pa-6 mt-12" Style="width: 500px;">
                <h3 class=" d-flex justify-center">Hello, @CurrentUser?.Name</h3>
                 <div class="form-group d-flex justify-center">
                     <label>User Id : @CurrentUser?.UserId</label>
                 </div>
                 <div class="form-group d-flex justify-center">
                                      <label>Username : @CurrentUser?.Username</label>
                                  </div>
                 <div class="form-group d-flex justify-center">
                     <label>Current email : @CurrentUser?.Email</label>
                 </div>
                 <div class="form-group d-flex justify-center">
                     <label> Role : @CurrentUser?.Role</label>
                 </div>
                       <MudImage Class="card-img" Src="@CurrentUser.Image" ObjectFit="ObjectFit.Contain" Height="200"></MudImage>

                                  
                 <div class="form-control-file">
                                 <label for="image">Image</label>
                                 <InputFile OnChange="OnFileChange"></InputFile>
                             </div>

             </MudCard>
        </div>
            <br/>

            <hr/>
            <br/>
            <br/>
            <div class="page-background-class align-center justify-center">
            <div class="allLectures"><h2>All Lectures</h2>
                @if (_lectureToShow == null) {
                    <LoadingComponent message=" Lectures. Please wait.."></LoadingComponent>
                }
                else {
                    <LectureList lectureToShow="_lecturesToShow"/>
                }

            </div>
            <div class="allLectures"><h2>Upvoted Lectures</h2>
                @if (_upvotedLectureToShow== null) {
                    <LoadingComponent message=" Upvoted lectures. Please wait.."></LoadingComponent>
                }
                else {
                    <LectureList upvotedLectureToShow="_upvotedLectureToShow"/>
                }
            
            </div>
              <div class="allQuestions"> <h2>All Questions</h2> 
                                        @if (_questionToShow == null) {
                                            <LoadingComponent message=" Questions. Please wait.."></LoadingComponent>
                                        }
                                        else {
                                            <QuestionList questionToShow="_questionToShow"/>
                                        }
              </div>
</div>
    </Authorized>

</AuthorizeView>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private string? username;
    private bool isLoggedIn;
    private List<LectureDto?> _lectureToShow;
    private List<LectureDto?> _upvotedLectureToShow;
    private List<QuestionDto?> _questionToShow;
    private UserCreationDto _newUser = new();

    public UserDto? CurrentUser;

    private void OpenLoginView()
    {
        NavMgr.NavigateTo($"/LoginUI");
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        username = user.Identity!.Name;
        CurrentUser = await _userService.GetUserByUsernameAsync(username);
        try {
            await GetLecureByUserId();
            await GetUpvotedLecureByUserId();
            await GetQuestionByUserId();
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }
        
    }

  
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        
        _newUser.Image = imageData;
        
    }
   




    private async Task GetLecureByUserId() {
        _lectureToShow = await _lectureService.GetLectureByTeacherIdAsync(CurrentUser.UserId);
    }

    private async Task GetUpvotedLecureByUserId() {
        _upvotedLectureToShow = await _lectureService.GetUpvotedLectureByUserIdAsync(CurrentUser.UserId);
    }
    private async Task GetQuestionByUserId() {
        _questionToShow = await _questionService.GetQuestionByUserIdAsync(CurrentUser.UserId);
    }

}




