@page "/EditQuestion/{Url}"
@inject IQuestionService QuestionService
@inject IAuthService authService
@inject NavigationManager NavMgr 
@using Blazored.TextEditor
@using Elearn.HttpClients.Service
@using Elearn.Shared.Dtos
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject IStringLocalizer<App> Localizer

<AuthorizeView>
    <NotAuthorized>
        <h3>@Localizer["Please log in to ask a question"]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">
        <style>
    body {
    background-image: url("img/1426870.png");
    }
</style>
    @if (name is not null && name.Equals(_newQuestion.AuthorName))
    {<EditForm Model="@_newQuestion" OnValidSubmit="UpdateQuestion">
        <MudGrid Class="d-flex justify-center align-center mx-auto pa-4 mt-8 " Style="width: 1300px;" Elevation="0">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <DataAnnotationsValidator/>
                    <h3 class=" pb-8">
                        <MudInputLabel Class="d-flex align-center justify-center ">@Localizer["Edit this question"]</MudInputLabel>
                    </h3>


                    <div class="form-group pb-4">
                        <label for="title">@Localizer["Question Title"]</label>
                        <InputText id="title" @bind-Value="_newQuestion.Title" class="form-control"/>
                        <ValidationMessage For="@(() => _newQuestion.Title)"/>
                    </div>
                    <div class="form-group pb-4">
                        <label for="url">@Localizer["Question Description"]</label>
                        <InputText id="description" @bind-Value="_newQuestion.Description" class="form-control"/>
                        <ValidationMessage For="@(() => _newQuestion.Description)"/>
                    </div>


                    <div class="card pb-8" style="height:350px;">
                        <div class="card-header text-dark">
                            Html Text Editor
                        </div>
                        <div style="height:250px; color:black;">

                            <!-- Text editor -->
                            <BlazoredTextEditor @ref=QuillHtml Placeholder="write somthing...">
                                <ToolbarContent>
                                    <select class="ql-header">
                                        <option selected=""></option>
                                        <option value="1"></option>
                                        <option value="2"></option>
                                        <option value="3"></option>
                                        <option value="4"></option>
                                        <option value="5"></option>
                                    </select>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <select class="ql-color"></select>
                                        <select class="ql-background"></select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-list" value="ordered"></button>
                                        <button class="ql-list" value="bullet"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-link"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-video"></button>
                                    </span>
                                </ToolbarContent>
                                <EditorContent>
                                    @((MarkupString)_newQuestion.Body)
                                </EditorContent>
                            </BlazoredTextEditor>

                        </div>
                    </div>


                    <div class="d-flex justify-center align-center pb-2 pt-4">@Error</div>


                    <MudCardActions Class="d-flex justify-center pb-4">
                        <button type="submit" class="btn btn-primary">@Localizer["Save changes"]</button>
                    </MudCardActions>


                    <!-- Preview card -->
                    <div class="card text-dark pb-4">
                        <div class="card-header text-dark">
                            the preview Of html editor
                        </div>
                        <div class="card-body">
                            @preview
                        </div>
                    </div>

                    <div class="card-footer d-flex justify-center">
                        <button type="button" class="btn btn-success" @onclick=@(async () => await ShowPreviewOfBody())>Show OutPut</button>
                    </div>


                    <ValidationSummary/>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </EditForm>
    }

    </Authorized>
</AuthorizeView>

@code {
    private BlazoredTextEditor QuillHtml;
    private MarkupString preview;
    private QuestionDto _newQuestion = new();
    
    [Parameter]
    public string? Url { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    public string Error = "";

    async Task UpdateQuestion()
    {
        _newQuestion.Body = await QuillHtml.GetHTML();
        
        if (string.IsNullOrEmpty(_newQuestion.Body))
        {
            Error = "No body found!";
            return;
        }
        if (string.IsNullOrEmpty(_newQuestion.Description))
        {
            Error = "Description is missing!";
            return;
        }
        if (string.IsNullOrEmpty(_newQuestion.Title))
        {
            Error = "Title is missing!";
            return;
        }
        if (string.IsNullOrEmpty(_newQuestion.Url))
        {
            Error = "Url is missing!";
            return;
        }

        
        _newQuestion.AuthorName = name;
        try
        {
            QuestionUpdateDto updateDto = new QuestionUpdateDto()
            {
                Title = _newQuestion.Title,
                Body = _newQuestion.Body,
                Description = _newQuestion.Description,
                Url = _newQuestion.Url,
                CreationDate = _newQuestion.CreationDate,
                AuthorName = _newQuestion.AuthorName
                
            };
            await QuestionService.UpdateQuestionAsync(updateDto);
            NavMgr.NavigateTo($"/Questions/{_newQuestion.Url}");
        }
        catch(Exception e)
        {
            Error = e.Message;
        }
        //var createdPost = await QuestionService.CreateAsync(_newQuestion);
       
    }

    private async Task ShowPreviewOfBody()
    {
        if (!string.IsNullOrWhiteSpace(await QuillHtml.GetText()))
        {
            preview = (MarkupString)await QuillHtml.GetHTML();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        userClaims = user.Claims;
        name = user.Identity!.Name!;
        _newQuestion = await QuestionService.GetQuestionByUrlAsync(Url);
    }

}