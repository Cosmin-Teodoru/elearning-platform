@using Elearn.Shared.Models
@using Elearn.Shared.Dtos
@using Elearn.HttpClients.Service
@using System.Security.Claims
@inject ICommentService CommentService

<AuthorizeView>
    <Authorized>
    <div class="section">
        <div class="card">

            <div class="form-group field flex-container">
                <div class="comment-section">Comment section below</div>
                <MudAvatar Size="Size.Small" Image="img/avatar.jpg"/>
                <input class="comment-input" type="text" placeholder="Post a comment" @bind="bodyText" @bind:event="oninput"/>
                <div class="button-row">
                    <button @onclick="Create" disabled="@(string.IsNullOrEmpty(bodyText))" class="acceptbtn">
                        <img src="img/comment.png" class="comment_img" alt="comment_icon">
                    </button>
                </div>
            </div>
        </div>
    </div>
    </Authorized>
</AuthorizeView>

@code
{
    private string bodyText = "";
    private string? name;
    
    [Parameter]
    public Post CurrentPost { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
    }
    
    
    
    private async Task Create()
    {
        
        try
        {
            await CommentService.Create(new CommentCreationDto(1, CurrentPost.Id, bodyText));
            bodyText = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            
        }
    }

}